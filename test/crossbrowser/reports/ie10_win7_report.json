{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2018-07-09T14:22:53.178Z",
    "end": "2018-07-09T14:23:14.721Z",
    "duration": 21543,
    "testsRegistered": 31,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 30,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3ac80892-bfc5-4e70-a18a-470cce8235bc",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "88338ecc-d0c8-4463-bb36-2181676db372",
        "title": "Cookies",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/cookies/cookies.test.js",
        "file": "/test/e2e/functional/cookies/cookies.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Cookies \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2c595de6-9b37-404a-b636-b022d88338a0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Cookies \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "e06d7c5c-7f6a-4a86-8d5c-fa067566d261",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Cookies \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9d367ea1-d6c2-4235-a2a6-a3980bfb8522",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Cookies \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "99ec9c3d-1684-4f33-bb0d-602a66f8ce76",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "I verify the visibility of the cookie banner and cookie",
            "fullTitle": "Cookies: I verify the visibility of the cookie banner and cookie",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5000e3db-9740-4c5c-8d7a-c1a9b6316ea7",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I click cookie banner URL to view the cookie policy",
            "fullTitle": "Cookies: I click cookie banner URL to view the cookie policy",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5ea5e786-19ed-456d-983b-e0f922b12a38",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I enter a valid surname and verify the cookie",
            "fullTitle": "Cookies: I enter a valid surname and verify the cookie",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "209033aa-3bfb-4316-8891-2f216d8ae933",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I enter an invalid surname and verify the absence of the cookie",
            "fullTitle": "Cookies: I enter an invalid surname and verify the absence of the cookie",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fdbad65d-412a-4c3e-bec6-7ff8e9804115",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "5000e3db-9740-4c5c-8d7a-c1a9b6316ea7",
          "5ea5e786-19ed-456d-983b-e0f922b12a38",
          "209033aa-3bfb-4316-8891-2f216d8ae933",
          "fdbad65d-412a-4c3e-bec6-7ff8e9804115"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "8f5e9044-cecf-4b2f-b03e-fa021c351d2f",
        "title": "HTTP 404 error page",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/errors/http404.test.js",
        "file": "/test/e2e/functional/errors/http404.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "HTTP 404 error page \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5575e7d9-dffd-4c1c-9df8-061fec7a0730",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "HTTP 404 error page \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "cc110709-05c9-4ee2-b84f-579cab0f5f87",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "HTTP 404 error page \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "43faf8d0-1186-48ff-b678-757d842e7520",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "HTTP 404 error page \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a3a07a2a-a665-43f3-8fc3-a7bf9be5014c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify a 404 when the page does not exist",
            "fullTitle": "HTTP 404 error page: Verify a 404 when the page does not exist",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2e51f23e-d9df-47ee-bb9d-4e8e4fed1cad",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Verify a 404 when the surname does not match",
            "fullTitle": "HTTP 404 error page: Verify a 404 when the surname does not match",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3ae7fe90-b65f-4cb9-8ee9-4fe44002eab2",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "2e51f23e-d9df-47ee-bb9d-4e8e4fed1cad",
          "3ae7fe90-b65f-4cb9-8ee9-4fe44002eab2"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "1cf036cd-7225-446e-bb15-2ad08f80d956",
        "title": "Google analytics",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/ga/google-analytics.test.js",
        "file": "/test/e2e/functional/ga/google-analytics.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Google analytics \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "63fe0589-d99e-443b-83ac-6102a9f5da82",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Google analytics \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 5577,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2efe59ea-2ee9-4028-a735-3d40ef7d5402",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Google analytics \"before each\" hook: Before",
            "timedOut": false,
            "duration": 6705,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I => {\n  I.amOnPage(`${paths.tya.validateSurname}/${appeal.appealNumber}${paths.tya.trackYourAppeal}`);",
            "err": {},
            "isRoot": false,
            "uuid": "28db4ea6-f130-4787-8fd0-cafc3e8ad9b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Google analytics \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8a69aee5-d939-4993-8538-802630ce4e26",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Google analytics \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 279,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ae51d8ca-80a8-4a12-baab-7ca15fa39ba1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify Google Analytics has been loaded",
            "fullTitle": "Google analytics: Verify Google Analytics has been loaded",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I => {\n  I.seeInSource('<script src=\"/public/javascripts/google-analytics-universal-tracker.js\"></script>');",
            "err": {},
            "isRoot": false,
            "uuid": "770e7047-8a84-4d8f-bb98-c4b051791725",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Verify UA account code has been loaded",
            "fullTitle": "Google analytics: Verify UA account code has been loaded",
            "timedOut": false,
            "duration": 8971,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "I => {\n  I.wait('5');\n  I.amOnPage('/public/javascripts/tya-analytics-tracker.js');\n  I.wait('2');\n  I.seeInSource('universalId: \\'UA-91309785-1\\'');",
            "err": {
              "message": "Error: expected HTML source of a page to include \"universalId: 'UA-91309785-1'\"",
              "estack": "expected HTML source of a page to include \"universalId: 'UA-91309785-1'\"\n\nScenario Steps:\n\n- I.seeInSource(\"universalId: 'UA-91309785-1'\") at Test.Scenario.only.I (test/e2e/functional/ga/google-analytics.test.js:18:5)\n- I.wait(\"2\") at Test.Scenario.only.I (test/e2e/functional/ga/google-analytics.test.js:17:5)\n- I.amOnPage(\"/public/javascripts/tya-analytics-tracker.js\") at Test.Scenario.only.I (test/e2e/functional/ga/google-analytics.test.js:16:5)\n- I.wait(\"5\") at Test.Scenario.only.I (test/e2e/functional/ga/google-analytics.test.js:15:5)\n\n",
              "diff": "- <html lang=\"en\"><!--<![endif]--><head>\n-     <meta charset=\"utf-8\">\n-     <title>\n- Enter your last name\n- </title>\n- \n-     <!--[if gt IE 8]><!--><link href=\"/public/stylesheets/govuk-template.css?0.22.3\" rel=\"stylesheet\" media=\"screen\"><!--<![endif]-->\n-     <!--[if IE 6]><link href=\"/public/stylesheets/govuk-template-ie6.css?0.22.3\" media=\"screen\" rel=\"stylesheet\" /><![endif]-->\n-     <!--[if IE 7]><link href=\"/public/stylesheets/govuk-template-ie7.css?0.22.3\" media=\"screen\" rel=\"stylesheet\" /><![endif]-->\n-     <!--[if IE 8]><link href=\"/public/stylesheets/govuk-template-ie8.css?0.22.3\" media=\"screen\" rel=\"stylesheet\" /><![endif]-->\n- --( 163 lines more )---\n+ universalId: 'UA-91309785-1'\n"
            },
            "isRoot": false,
            "uuid": "edec1f7c-c793-4c34-80af-52dbc68f2a6a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "edec1f7c-c793-4c34-80af-52dbc68f2a6a"
        ],
        "pending": [],
        "skipped": [
          "770e7047-8a84-4d8f-bb98-c4b051791725"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "a1ce8525-5782-4052-b5e7-a86343a3ef1e",
        "title": "TYA anchor links ",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/links/links.test.js",
        "file": "/test/e2e/functional/links/links.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA anchor links  \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "67b89d81-6bef-4821-aa2e-6460b578b0d8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA anchor links  \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a9032502-4100-4cf1-87a3-af46eca17f62",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA anchor links  \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "51a85fb3-0fbb-4404-8c36-2fc2620c6067",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA anchor links  \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "253007b5-dce4-4322-8886-1204c9e959e0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA anchor links  \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "d072227b-8eba-4779-a338-ba9301df6735",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Clicking the 'What to expect at your hearing' link ",
            "fullTitle": "TYA anchor links : Clicking the 'What to expect at your hearing' link ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dce06cfe-e54c-4528-8833-089e4133bede",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Clicking the 'Claiming hearing expenses' link ",
            "fullTitle": "TYA anchor links : Clicking the 'Claiming hearing expenses' link ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c03c3efc-2425-4547-8ae5-014e7ca9f99b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Clicking the 'Providing evidence to support your appeal' link ",
            "fullTitle": "TYA anchor links : Clicking the 'Providing evidence to support your appeal' link ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "be7b6161-9c79-448c-9a3a-aa0c89820ac0",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Clicking the 'Contact us' link ",
            "fullTitle": "TYA anchor links : Clicking the 'Contact us' link ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ee4c2c22-fe64-4cfb-a8e1-0734d82f9b65",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Clicking the 'Cookies' link ",
            "fullTitle": "TYA anchor links : Clicking the 'Cookies' link ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "85c50635-0109-4109-be16-ce8108b7189a",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "dce06cfe-e54c-4528-8833-089e4133bede",
          "c03c3efc-2425-4547-8ae5-014e7ca9f99b",
          "be7b6161-9c79-448c-9a3a-aa0c89820ac0",
          "ee4c2c22-fe64-4cfb-a8e1-0734d82f9b65",
          "85c50635-0109-4109-be16-ce8108b7189a"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "66805d6c-523d-4bb4-8bb2-1f0c3044c944",
        "title": "About hearing",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/aboutHearing.test.js",
        "file": "/test/e2e/functional/page/aboutHearing.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "About hearing \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a92c60b2-8249-45a4-a542-6bddcd179b34",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "About hearing \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "c1f8969f-6e57-4099-9420-d0114dbd4771",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "About hearing \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5b05a100-683e-4ce1-922b-ed2fcba0a5bf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "About hearing \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2697fea1-9ab3-4e93-97fb-df748e55ac35",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "About hearing \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "28284e50-d583-4b9a-bbdf-218b3a1d3037",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify the dynamic content of the /abouthearing page",
            "fullTitle": "About hearing: Verify the dynamic content of the /abouthearing page",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "49ecbaea-1458-4993-9035-0ca97aedfce9",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "49ecbaea-1458-4993-9035-0ca97aedfce9"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "491c2c38-6e99-4e8d-9f2c-e30008207f2d",
        "title": "Contact us",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/contactUs.test.js",
        "file": "/test/e2e/functional/page/contactUs.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Contact us \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "90096223-05ff-4a4c-963c-7e41c9ae1040",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Contact us \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "34a0cb3b-34c9-4ca1-93af-e9c358e18008",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Contact us \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "4adda1fd-b47e-4451-98f8-65c177cf59d0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Contact us \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ab287de5-1c85-496f-bbad-49bc4918c6ef",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Contact us \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5c8c7b14-150e-4d5d-8f57-465539ca2079",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "verify contact us page",
            "fullTitle": "Contact us: verify contact us page",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7c4836ed-c34f-4471-ae82-65c18f61ffb6",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "7c4836ed-c34f-4471-ae82-65c18f61ffb6"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "a7c21f5f-bf5b-46e4-b610-f03e382f3cb1",
        "title": "TYA - Adjourned",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/adjourned.test.js",
        "file": "/test/e2e/functional/page/tya/adjourned.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Adjourned \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "261ba59c-e0bb-4ecf-840b-0153b7e83f7f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Adjourned \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "13f92ae8-4455-4b16-8996-13f009778331",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Adjourned \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9bb0c008-fc0a-4896-a56a-cebea3e9052e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Adjourned \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "d933dca1-9326-4b81-b07f-bb24cdc3b77d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Adjourned \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b5c96f81-45fd-4220-97d6-ecad4814d8a3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify adjourned appeal details, progress bar status, screen reader text and content ",
            "fullTitle": "TYA - Adjourned: Verify adjourned appeal details, progress bar status, screen reader text and content ",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "4b8ff777-d9b1-4ffe-a3dd-b36ef9980866",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "4b8ff777-d9b1-4ffe-a3dd-b36ef9980866"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "080463bf-975d-494a-9241-cee700737255",
        "title": "TYA - Appeal Received",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/appealRecieved.test.js",
        "file": "/test/e2e/functional/page/tya/appealRecieved.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Appeal Received \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6a5b1484-dbeb-4ae5-90ee-1c1602d5eb71",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Appeal Received \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "30601a9a-dd69-4ddf-b1f5-a39d142e96f5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Appeal Received \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "66666843-4ce9-4585-aa77-b512fae757ac",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Appeal Received \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "c06d3aa8-7fb2-49ab-bc83-34610196d00f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Appeal Received \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "95dad43a-6e55-4f17-94ad-3146d4c00f85",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify appeal received details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Appeal Received: Verify appeal received details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ca998988-7905-466a-84aa-92f62ab13b83",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "ca998988-7905-466a-84aa-92f62ab13b83"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "25470ebc-50e8-46a8-aed4-c3a18bd7849d",
        "title": "TYA - Closed",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/closed.test.js",
        "file": "/test/e2e/functional/page/tya/closed.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Closed \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "4be21e78-381d-4e25-b2dc-15ef7020c44b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Closed \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ccb11bba-fce3-4c07-abea-a4722787f634",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Closed \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "563a3a19-b5fe-40cc-ac16-0a9d119fc4d9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Closed \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "fd873cf0-f8f5-4e9d-9572-66d58536884b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Closed \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8e4b2a43-9f8f-471d-9293-15bf9dc3c4b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify closed appeal details, no progress bar and content",
            "fullTitle": "TYA - Closed: Verify closed appeal details, no progress bar and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6f5edbe3-73bc-41df-8bf2-561103aec166",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "6f5edbe3-73bc-41df-8bf2-561103aec166"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "265dc8b1-0692-4b21-8c96-0f0234f76992",
        "title": "TYA - Dormant",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/dormant.test.js",
        "file": "/test/e2e/functional/page/tya/dormant.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Dormant \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a9b0128b-81e5-42d4-8e47-581dfb9ef3d1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Dormant \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "78e6dd3f-05a9-4fc7-8d09-31f9a5a31ea1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Dormant \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "370b53d4-c98a-4a7b-b41c-b125742cd47d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Dormant \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "40b87ada-4cbd-4979-871d-e4852fe48052",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Dormant \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9d93fe46-3e7d-43a3-ab58-f3d1253f65bf",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify dormant appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Dormant: Verify dormant appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "bf3fdbd9-6ce2-4bfd-9f10-42ebb6e38c6c",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "bf3fdbd9-6ce2-4bfd-9f10-42ebb6e38c6c"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "b83114b6-4099-4711-a51f-d494b845a4ca",
        "title": "TYA - DWP Respond",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/dwpRespond.test.js",
        "file": "/test/e2e/functional/page/tya/dwpRespond.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - DWP Respond \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "e40c1379-a40c-4cb8-87f1-c63f4b27f4f0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - DWP Respond \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9fe860fb-22f9-46ac-94c1-e3d99aa19299",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - DWP Respond \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1565308d-f007-4f2d-97b9-f642cda706df",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - DWP Respond \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "01ed8b07-38f6-43c8-b57d-c39926b33236",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - DWP Respond \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "7b0bcb15-a28e-4a28-9aa2-4d8743db7213",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify DWP respond appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - DWP Respond: Verify DWP respond appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c44b2d86-f585-4895-ab98-6cbed3dc5f44",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "c44b2d86-f585-4895-ab98-6cbed3dc5f44"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "831c4655-f20e-442c-9655-1720c665b8d8",
        "title": "TYA - DWP Respond Overdue",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/dwpRespondOverdue.test.js",
        "file": "/test/e2e/functional/page/tya/dwpRespondOverdue.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - DWP Respond Overdue \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "eb1dc2a8-6c7d-4b35-bced-4214e734cb31",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - DWP Respond Overdue \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "cfaf9e08-b91e-489a-b512-0bc92b44bf6e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - DWP Respond Overdue \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f896fdef-c2f6-4296-b6f1-c16f35940f84",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - DWP Respond Overdue \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "4cbe9044-0286-4f64-bbd5-18008638729e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - DWP Respond Overdue \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "7a5bc018-43f9-4701-a9b1-28346c5761f7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify DWP respond overdue appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - DWP Respond Overdue: Verify DWP respond overdue appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c4996c42-aa91-45e2-a07d-b9d9563f63ed",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "c4996c42-aa91-45e2-a07d-b9d9563f63ed"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "71f3a5e5-1469-497e-b228-ad02dd1ef954",
        "title": "TYA - Hearing",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/hearing.test.js",
        "file": "/test/e2e/functional/page/tya/hearing.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Hearing \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ef4b818d-6f00-4c41-8c5e-f1551cbe73c2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Hearing \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5c159dce-5595-4ef1-bf62-79345770979a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Hearing \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eca05406-f6a5-42e7-ba16-561281b3dc85",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Hearing \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8efe7c2d-4fb5-4827-9ce9-de1f8748faf2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Hearing \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b2510a12-c196-409f-9368-62a6f1d8888f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify hearing appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Hearing: Verify hearing appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9d0bdafe-2a79-4ea5-a38c-885c745f7cc3",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "9d0bdafe-2a79-4ea5-a38c-885c745f7cc3"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "f56c7823-4bb6-4bb0-bf74-9fc8ac2d5d55",
        "title": "TYA - Hearing Booked",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/hearingBooked.test.js",
        "file": "/test/e2e/functional/page/tya/hearingBooked.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Hearing Booked \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8a9d1e8a-77d3-40a4-a662-ec29045820a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Hearing Booked \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "70408053-3333-4726-8eb1-a996ea038a70",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Hearing Booked \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "16f8cea9-5044-42b6-864b-840873d2eecb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Hearing Booked \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "79d1c572-90d0-4d5b-9918-c4beed47bfb4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Hearing Booked \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "947421ee-6167-435d-9d19-34fe91521b66",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify hearing booked appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Hearing Booked: Verify hearing booked appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b027b518-257f-464f-a1ba-68decaef81aa",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "b027b518-257f-464f-a1ba-68decaef81aa"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "fb327d45-5add-4bf8-9230-66407eef3f12",
        "title": "TYA - Lapsed Revised",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/lapsedRevised.test.js",
        "file": "/test/e2e/functional/page/tya/lapsedRevised.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Lapsed Revised \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9dcffc89-ab1f-4f8b-b256-80287fa64777",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Lapsed Revised \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "38f975f7-889d-4c24-ac10-90c12d56ffec",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Lapsed Revised \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b931a91e-15bf-46d5-a8cb-ea5ead4418fa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Lapsed Revised \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "473ee798-deb9-4bee-bbc0-4ac6c4f2b7a3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Lapsed Revised \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "63a42405-fd69-4978-8bb2-90e42c0d077f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify lapsed revised appeal details, no progress bar and content",
            "fullTitle": "TYA - Lapsed Revised: Verify lapsed revised appeal details, no progress bar and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "40c24cd7-c4cf-43e1-9926-1d128360ec3d",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "40c24cd7-c4cf-43e1-9926-1d128360ec3d"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "4c55f812-cb25-4a7b-ad04-66aa5e4ee54d",
        "title": "TYA - Past Hearing Booked",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/pastHearingBooked.test.js",
        "file": "/test/e2e/functional/page/tya/pastHearingBooked.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Past Hearing Booked \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "852069b1-894b-45d8-a604-c988c0e1ae1a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Past Hearing Booked \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "35c7407d-00e8-4758-aa76-faf25142650f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Past Hearing Booked \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a6f8163d-4f43-4415-83cb-e9a0ea094ca5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Past Hearing Booked \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f5415e4e-9d16-454d-8c61-8df39ed223f6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Past Hearing Booked \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8e2091d8-c9ce-4f7a-883a-82e11b778ed4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify past hearing booked appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Past Hearing Booked: Verify past hearing booked appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7bd244ea-d5c6-4a94-9182-eec904c5859f",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "7bd244ea-d5c6-4a94-9182-eec904c5859f"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "a3466eed-89a8-437a-a34b-6ac1f854ddaa",
        "title": "TYA - Postponed",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/postponed.test.js",
        "file": "/test/e2e/functional/page/tya/postponed.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Postponed \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ace50d46-eca8-4aa3-b022-ff8942935de7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Postponed \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "c01bbc91-0a39-44b7-8558-9454e9e8f7e3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Postponed \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a59faf4-8400-4360-907e-36f7846d5382",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Postponed \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "dc306e12-540b-45dc-88ed-097534a991c3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Postponed \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "7afebd47-b6bc-4f14-b72f-804552461001",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify postponed appeal details, progress bar status, screen reader text and content",
            "fullTitle": "TYA - Postponed: Verify postponed appeal details, progress bar status, screen reader text and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "d0466c59-76c4-4cc5-9fe0-441f8aac5219",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "d0466c59-76c4-4cc5-9fe0-441f8aac5219"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "25a19365-e7a2-403f-b9e9-ee1d41aad902",
        "title": "TYA - Withdrawn",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/tya/withdrawn.test.js",
        "file": "/test/e2e/functional/page/tya/withdrawn.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "TYA - Withdrawn \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "e8af9ab7-c737-481b-ab69-3697fd7918dc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "TYA - Withdrawn \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "cfa41c2d-d36e-49d7-8a40-a57203d7deac",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "TYA - Withdrawn \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fd8fa779-51f7-4924-a26c-41800b2a62fb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "TYA - Withdrawn \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "50597d2e-03d9-4559-95be-c95799db115b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "TYA - Withdrawn \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "d7269776-060c-4939-af85-61e185a5df76",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verify appeal details, no progress bar and content",
            "fullTitle": "TYA - Withdrawn: Verify appeal details, no progress bar and content",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ff3f8a59-bb3e-4cb7-a1ef-2790c4e655e8",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "ff3f8a59-bb3e-4cb7-a1ef-2790c4e655e8"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "441a133e-fa5f-4eb0-aeda-b1d414712023",
        "title": "Verify surname",
        "fullFile": "/Users/vivekreddy/moj/sscs/track-your-appeal-frontend/test/e2e/functional/page/validateSurname.test.js",
        "file": "/test/e2e/functional/page/validateSurname.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Verify surname \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6a0dd4f9-5fbd-4eaa-9575-522de924332c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Verify surname \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "163f28f0-b919-423e-8aea-48015aab81d0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Verify surname \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(fn)) {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  const res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9b01dfc8-2d5c-440f-a43b-1c72846529f9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Verify surname \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2c593ce8-4ac7-485f-b302-3d603959c1ba",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Verify surname \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "216a2dd3-524a-48e5-8183-4271bbe3d064",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "I enter a surname that matches the appeal, I am taken to /trackyourappeal",
            "fullTitle": "Verify surname: I enter a surname that matches the appeal, I am taken to /trackyourappeal",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "574d5c5e-26eb-4357-81c3-03636a174ebc",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I enter a surname that does not match the appeal, I see errors",
            "fullTitle": "Verify surname: I enter a surname that does not match the appeal, I see errors",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b14262a1-a191-427f-b8e8-a50580bdc064",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I omit the surname and submit, I see errors",
            "fullTitle": "Verify surname: I omit the surname and submit, I see errors",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a4797e59-1f95-4c30-9458-c46e7acfd2fd",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "I enter a surname that is incorrectly formatted, I see errors",
            "fullTitle": "Verify surname: I enter a surname that is incorrectly formatted, I see errors",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  testFn.apply(test, getInjectedArguments(testFn, test)).then((res) => {\n    recorder.add('fire test.passed and test.finished', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  });\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  const res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "689c4cb0-f51f-4ae4-949b-77cd4860fc54",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "574d5c5e-26eb-4357-81c3-03636a174ebc",
          "b14262a1-a191-427f-b8e8-a50580bdc064",
          "a4797e59-1f95-4c30-9458-c46e7acfd2fd",
          "689c4cb0-f51f-4ae4-949b-77cd4860fc54"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 0
  },
  "copyrightYear": 2018
}